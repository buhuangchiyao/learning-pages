1,Vue实例的创建：
    var vm=new vue({
        //选项
        el:     //DOM元素选择器。
        data:{
            //用于定义属性
        },
        methods:{
            //用于定义函数，可以通过return来返回函数值
        }
    })
当一个Vue实例被创建时，他向Vue的响应系统中加入了其data对象中能找到的所有的属性。这些属性的值发生改变也会引起html视图的相应改变。
{{ }}用于输出对象属性和函数返回值。
Vue实例提供的属性和方法都有前缀$,方便和用户定义的属性区分。

//补充：生命周期钩子,常用：
created:实例创建完成后调用，此阶段完成了数据的观测，$el还不可用。（用于初始化处理一些数据）
mounted：el挂载到实例上后调用，第一个业务逻辑在这里开始。
beforeDestroy：实例销毁之前调用，解绑一些使用的addEventListener监听的事件。

2，Vue.js模板语法
插值（数据绑定）
    文本插值：双大括号{{···}}
    HTML插入：使用指令v-html
    属性绑定：v-bind指令        //v-bind:attribute="value"
    表达式：Vue.js只支持单个表达式，不支持语句和流控制
指令
    指令：是指带有v-前缀的特殊属性，用于在表达式值改变时，将DOM行为应用到HTML页面。
    指令参数：在冒号后指明
    指令修饰符：以半角句号 . 指明的特殊参数后缀，用于指出一个指令应该以特殊方式绑定

过滤器
    Vue.js支持在{{}}插值的末尾添加管道符"|"对数据进行过滤，通常用于处理简单的文本转换。

缩写
    v-bind缩写：
        <!-- 完整语法 -->
        <a v-bind:href="url"></a>
        <!-- 缩写 -->
        <a :href="url"></a>
    v-on缩写：
        <!-- 完整语法 -->
        <a v-on:click="doSomething"></a>
        <!-- 缩写 -->
        <a @click="doSomething"></a>

3，Vue.js条件与循环
条件判断
    v-if指令：根据表达式的值(true 或 false )来决定是否执行代码块
    v-else指令：给v-if指令添加"else"块
    v-else-if指令：用作v-if的else-if块
    v-else 、v-else-if 必须跟在 v-if 或者 v-else-if之后。
    如果一次判断的是多个元素，可以在vue.js内置的<template>元素上使用条件指令。

    v-show指令：用法与v-if一致，不过v-show是改变元素的css属性display。v-show为flase时，元素的内联样式display:none;

循环语句
    v-for指令需要以site in sites形式的特殊语法，sites 是源数据数组并且 site 是数组元素迭代的别名。
        1，绑定数据到数组来渲染列表
        2，模板template中使用
        3，迭代对象：通过一个对象的属性来迭代数据（ 可以设置键值和索引）
        4，迭代整数实现循环递增
Vue 在渲染元素时，会尽可能地复用已有的元素而非重新渲染，如果不希望这样，可以使用key元素。key值必须是唯一的。

4，Vue.js计算属性
关键字：computed
作用：处理复杂逻辑,常用于动态地设置元素的样式名称class和内联样式style；使用组件时，用来动态传递props。
和函数的区别：我们可以使用 methods 来替代 computed，效果上两个都是一样的，但是 
            computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。
            而使用 methods ，在重新渲染的时候，函数总会重新调用执行。
**每一个计算属性都包含一个getter和一个setter,默认情况下只是利用getter来读取。可以用setter执行自定义操作。

5，Vue.js样式绑定
绑定class的方式：
    对象语法：给v-bind:class设置对象。  
        V-bind:class="{active:isactive,green:isgreen}"
        1，对象可以传入多个属性，并且 :class可以与普通class共存
        2，:class内表达式为真时，对应的类名被加载；
        3，:class表达式过长或逻辑复杂时，可以绑定一个计算属性。
    数组语法：当需要应用多个class时，给:class绑定一个数组，应用一个class列表
        v-bind:class="['active',isgreen?'green':'']"
        可以在数组语法中使用对象语法、也可以使用data,computed,methods三种方法。
    组件语法

绑定内联样式style：
    使用v-bind:style(即 :style)，与:class类似有数组和对象语法。
    数组语法不常用。
    一般样式写在data或者computed里。

6，vue.js事件处理器
    表单输入：v-model指令来在 input、select、textarea、checkbox、radio 等表单控件元素上创建双向数据绑定，根据表单上的值，自动更新绑定的元素的值。
    按钮事件：v-on指令进行事件监听和响应。缩写：@event
    v-on接受定义的方法，也可以是一个JavaScript语句。
修饰符（设置条件）
vue时间的修饰符和按键修饰符。

7，表单和v-model
v-model用于在表单类元素上双向绑定数据。
    可以用于单选按钮，复选按钮和下拉列表的值返回。
v-model也有修饰符，用于控制数据同步的时机。


Vue组件
可以复用的Vue实例
1，创建Vue实例的方法：
    全局注册：Vue.component('my-component-name',{/*...*/})
        组件名是Vue.component的第一个参数。
        注册之后可以用在任何新创建的Vue根实例（new Vue)的模板中。
    局部注册：通过一个普通的JavaScript对象来定义组件，然后在components选项中注册组件
        局部注册的组件在其子组件中不可用。
    组件名的定义方式：
    短横线分隔命名：my-component-name
    首字母大写命名：MyComponentName

模块系统中组件的注册：
    局部注册
    import ComponentName from './ComponentName'
    export default{
        components:{
            ComponentName
        }
    }
    基础组建的全局注册

2，prop传递数据
prop 是子组件用来接受父组件传递过来的数据的一个自定义属性。（组件被调用时使用调用该组件的参数/数据）
    HTML不区分大小写，所以使用DOM模板时，驼峰命名的props名称要转化为短横线分割命名。
    所以推荐一直使用短横线分割组件命名。
动态prop:用v-bind动态绑定props的值到父组件的数据中。
**prop是单向绑定的，当父组件的属性变化时，将传导给子组件，但是不会反过来。

3，自定义事件
子组件使用自定义事件将数据传递给父组件。
    $on(eventName)---监听事件
    $emit(enentName)---触发事件
4,组件通信
父子组件通信，兄弟组件通信，跨级组件通信。
    1）自定义事件:
        子组件用$emit()来触发事件，父组件用$on()来监听子组件的事件。
        可以用v-on在组件上监听自定义事件，也可以监听DOM事件。
    2)使用v-model   
        v-model与input,prop关系
    3)将原生事件绑定到组件
        使用v-on的.native修饰符可以监听原生事件
        




    
